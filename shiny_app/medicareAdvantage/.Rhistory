shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
install.packages("viridis")
library(viridis)
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
pal <- viridis(n = 10)
pal
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
pal <- colorQuantile(viridis(n=10))
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
df <- merge(df, us.map.state, by.x="State", by.y="NAME")
library(DT)
library(rgdal)
library(rgeos)
library(leaflet)
library(viridis)
library(stringr)
library(dplyr)
library(readxl)
library(tidyverse)
library(wesanderson)
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
df <- merge(df, us.map.state, by.x="State", by.y="NAME")
getwd()
setwd('/NYCZE')
setwd('C:/Users/NYCZE')
setwd('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage/')
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
df <- merge(df, us.map.state, by.x="State", by.y="NAME")
us.map.state <- readOGR(dsn= './cb_2018_us_state_500k', layer = "cb_2018_us_state_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
df <- merge(df, us.map.state, by.x="State", by.y="NAME")
colnames(df)
head(df)
df %>%
filter(County == 'TOTAL' & Year == input$year_us & Month == input$month_us) %>%
select(State, input$value) %>%
arrange(desc(input$value))
df %>%
filter(County == 'TOTAL' & Year == '2019' & Month == 'February') %>%
select(State, MedicareTotal ) %>%
arrange(desc(MedicareTotal ))
df[,1]
df[,2]
test.df <- df %>%
filter(County == 'TOTAL' & Year == '2019' & Month == 'February') %>%
select(State, MedicareTotal ) %>%
arrange(desc(MedicareTotal ))
test.df
test.df[,2]
shiny::runApp()
runApp()
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
df <- merge(df, us.map.state, by.x="State", by.y="NAME")
stateData <- df %>%
filter(County == 'TOTAL' & Year == '2018' Month == 'October') %>%
select(State, MedicareTotal)
colnames(df)
df$State
stateData <- df %>%
filter(County == 'TOTAL' & Year == '2018' Month == 'October') %>%
select(State, MedicareTotal)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
state_total <- df %>%
filter(County == 'TOTAL' & Year == '2018' & Month == 'October') %>%
select(State, MedicareTotal)
state_total
runApp()
runApp()
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
state_total <- df %>%
filter(County == 'TOTAL' & Year == '2018' & Month == 'October') %>%
select(State, MedicareTotal)
state_total
options(scipen=999)
#County Shape files
# Read in the county shape files
us.map.county <- readOGR(dsn= './cb_2018_us_county_500k', layer = "cb_2018_us_county_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp <- gSimplify(us.map.county, tol = 0.0125, topologyPreserve = FALSE)
simplified_county <- SpatialPolygonsDataFrame(simplified_shp, data = us.map.county@data)
#format(object.size(simplified), units = "Mb")
#State shape files
us.map.state <- readOGR(dsn= './cb_2018_us_state_500k', layer = "cb_2018_us_state_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
format(object.size(us.map.state), units = "Mb")
### Create dummy data
set.seed(111)
mydf <- data.frame(place = unique(us.map.county$GEOID),
value_1 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_2 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_3 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_4 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE))
# Import the monthly enrollment data for all medicare products
# found here https://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/CMSProgramStatistics/Downloads/Enrollment_Dashboard_Data_File.zip
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
df <- merge(df, us.map.state, by.x="State", by.y="NAME")
state_total <- df %>%
filter(County == 'TOTAL' & Year == '2018' & Month == 'October') %>%
select(State, MedicareTotal)
state_total
runApp()
runApp()
simplified_shp_v1 <- gSimplify(us.map.county, tol = 0..0001, topologyPreserve = FALSE)
simplified_state <- SpatialPolygonsDataFrame(simplified_shp_v1, data = us.map.state@data)
format(object.size(us.map.state), units = "Mb")
runApp()
format(object.size(us.map.state), units = "Mb")
simplified_shp_v1 <- gSimplify(us.map.state, tol = 0.0001, topologyPreserve = FALSE)
simplified_state <- SpatialPolygonsDataFrame(simplified_shp_v1, data = us.map.state@data)
simplified_state
coordinates(simplified_state)
simplified_state$NAME
runApp()
df
coordinates(df)
runApp()
us.map.state$NAME
runApp()
runApp()
runApp()
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
df <- merge(df, us.map.state, by.x="State", by.y="NAME")
df$STATEFP
runApp()
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
df <- merge(df, us.map.state, by.x="State", by.y="NAME")
df %>%
filter(County == 'TOTAL' & Year == input$year_us & Month == input$month_us)
df %>%
filter(County == 'TOTAL' & Year == "MedicareTotal" & Month == input$month_us)
df %>%
filter(County == 'TOTAL' & Year == "2019" & Month == "January")
test_df <- df %>%
filter(County == 'TOTAL' & Year == "2019" & Month == "January")
test_df
typeof(test_df)
test_df$GEOID
typeof(us.map.state)
typeof(df)
runApp()
runApp()
runApp()
runApp()
runApp()
us.map.state$STATEFP
us.map.state$STATENS
us.map.state$AFFGEOID
us.map.state$STUSPS
us.map.state$LSAD
us.map.state$ALAND
runApp()
runApp()
us.map.state$GEOID
runApp()
us.map.state$NAME
runApp()
runApp()
test_df <- merge(us.map.state, stateData()[,c("State", input$value), drop = TRUE], by.x = "NAME", by.y = "State")
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
state_total <- df %>%
filter(County == 'TOTAL' & Year == '2018' & Month == 'October') %>%
select(State, MedicareTotal))
state_total
test_df <- merge(us.map.state, stateData()[,c("State", input$value), drop = TRUE], by.x = "NAME", by.y = "State")
test_df <- merge(us.map.state, state_total[,c("State", input$value), drop = TRUE], by.x = "NAME", by.y = "State")
test_df <- merge(us.map.state, stateData()[,c("State", input$value), drop = TRUE], by.x = "NAME", by.y = "State")
test_df$MedicareTotal
test_df[ ,c("State", "MedicareTotal"), drop = TRUE]
runApp()
runApp()
runApp()
test_df[ ,c("State", "MedicareTotal"), drop = TRUE]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test_df[, "MedicareAdvantage"]
test_df[, "MedicareAdvantage",]
test_df[, "MedicareAdvantage", drop = FALSE]
test_df[, "MedicareTotal", drop = FALSE]
runApp()
runApp()
runApp()
runApp()
test_df <- merge(us.map.state, state_total[,c("State", input$value), drop = TRUE], by.x = "NAME", by.y = "State")
test_df$MedicareTotal
test_df[, "MedicareTotal", drop = TRUE]
runApp()
colorQuantile("Reds", test_df[, input$value, drop = TRUE], n=9)
colorQuantile("Reds", "MedicareTotal", n=9)
colorQuantile("Reds", test_df[, "MedicareTotal", drop = TRUE], n=9)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
typeof(test_df[, "MedicareTotal", drop = TRUE])
typeof(test_df$MedicareTotal)
runApp()
runApp()
runApp()
runApp()
typeof(test_df)
test_df
test_df
typeof(test_df$MedicareTotal)
test_df[["MedicareTotal"]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
