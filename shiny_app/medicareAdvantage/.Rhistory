runApp()
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
#install.packages("ggplot2")
library(ggplot2)
library(reshape2)
set.seed(111)
mydf <- data.frame(value_1 = sample.int(n = 1000000, size = 100),
value_2 = sample.int(n = 1000000, size = 100),
value_3 = sample.int(n = 1000000, size = 100),
value_4 = sample.int(n = 1000000, size = 100))
mydf <- t(mydf)
df <- melt(mydf)
df$rowid <- 1:length(mydf)
colnames(df)
colnames(df)
ggplot(df, aes(Var1, value, group=factor(Var2))) + geom_line(aes(color=factor(Var2)))
ggplot(df, aes(Var2, value, group=factor(Var1))) + geom_line(aes(color=factor(Var1)))
head(df)
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
options(scipen=999)
#County Shape files
# Read in the county shape files
us.map.county <- readOGR(dsn= './cb_2018_us_county_500k', layer = "cb_2018_us_county_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp <- gSimplify(us.map.county, tol = 0.0125, topologyPreserve = FALSE)
simplified_county <- SpatialPolygonsDataFrame(simplified_shp, data = us.map.county@data)
#format(object.size(simplified), units = "Mb")
#State shape files
us.map.state <- readOGR(dsn= './cb_2018_us_state_500k', layer = "cb_2018_us_state_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp_v1 <- gSimplify(us.map.state, tol = 0.0001, topologyPreserve = FALSE)
simplified_state <- SpatialPolygonsDataFrame(simplified_shp_v1, data = us.map.state@data)
format(object.size(us.map.state), units = "Mb")
### Create dummy data
set.seed(111)
mydf <- data.frame(place = unique(us.map.county$GEOID),
value_1 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_2 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_3 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_4 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE))
# Import the monthly enrollment data for all medicare products
# found here https://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/CMSProgramStatistics/Downloads/Enrollment_Dashboard_Data_File.zip
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
df <- transform(df, OrigMedicare_perc = as.integer(100*OriginalMedicare / MedicareTotal))
df <- transform(df, MedAdvOther_perc = as.integer(100*MedAdvOther / MedicareTotal))
df <- transform(df, MedicareTotal_perc = 100*MedicareTotal / MedicareTotal)
df <- as.data.frame(merge(df, us.map.state, by.x="State", by.y="NAME"))
simplified_county
simplified_county$STATEFP
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
which(simplified_county$STATEFP == "06"), ]
simplified_county[which(simplified_county$STATEFP == input$state), ]
simplified_county[which(simplified_county$STATEFP == "06"), ]
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
county.data <- read.csv('county_payer_stats_t12mo.csv', header=TRUE, sep = ",")
county.df <- county.data %>%
filter(State == "AL" & FIPS.State.County.Code == "1001") %>% # filter based on state and FIPS code
arrange(desc(Sep.19)) %>%                                    # sort based on last months' values
select (-c(X, State, FIPS.State.County.Code))                # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
# Create ggplot2 graph
county.df <- melt(county.df, "Parent.Organization")
ggplot(county.df, aes(variable, value, group = Parent.Organization, color = Parent.Organization)) +
geom_line()
library(dplyr)
library(ggplot2)
library(reshape2)
county.data <- read.csv('county_payer_stats_t12mo.csv', header=TRUE, sep = ",")
county.df <- county.data %>%
filter(State == "AL" & FIPS.State.County.Code == "1001") %>% # filter based on state and FIPS code
arrange(desc(Sep.19)) %>%                                    # sort based on last months' values
select (-c(X, State, FIPS.State.County.Code))                # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
# Create ggplot2 graph
county.df <- melt(county.df, "Parent.Organization")
ggplot(county.df, aes(variable, value, group = Parent.Organization, color = Parent.Organization)) +
geom_line()
setwd()
getwd()
setwd("C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/")
county.data <- read.csv('county_payer_stats_t12mo.csv', header=TRUE, sep = ",")
county.df <- county.data %>%
filter(State == "AL" & FIPS.State.County.Code == "1001") %>% # filter based on state and FIPS code
arrange(desc(Sep.19)) %>%                                    # sort based on last months' values
select (-c(X, State, FIPS.State.County.Code))                # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
# Create ggplot2 graph
county.df <- melt(county.df, "Parent.Organization")
ggplot(county.df, aes(variable, value, group = Parent.Organization, color = Parent.Organization)) +
geom_line()
county.data <- read.csv('county_payer_stats_t12mo.csv', header=TRUE, sep = ",")
list.files()
setwd("medicareAdvantage/")
list.files()
county.data <- read.csv('county_payer_stats_t12mo.csv', header=TRUE, sep = ",")
county.df <- county.data %>%
filter(State == "AL" & FIPS.State.County.Code == "1001") %>% # filter based on state and FIPS code
arrange(desc(Sep.19)) %>%                                    # sort based on last months' values
select (-c(X, State, FIPS.State.County.Code))                # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
# Create ggplot2 graph
county.df <- melt(county.df, "Parent.Organization")
ggplot(county.df, aes(variable, value, group = Parent.Organization, color = Parent.Organization)) +
geom_line()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
county.data <- read.csv('county_payer_stats_t12mo.csv', header=TRUE, sep = ",")
county.df <- county.data %>%
filter(State == "AL" & FIPS.State.County.Code == "1001") %>% # filter based on state and FIPS code
arrange(desc(Sep.19)) %>%                                    # sort based on last months' values
select (-c(X, State, FIPS.State.County.Code))                # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
# Create ggplot2 graph
county.df <- melt(county.df, "Parent.Organization")
ggplot(county.df, aes(variable, value, group = Parent.Organization, color = Parent.Organization)) +
geom_line()
county.data <- read.csv('county_payer_stats_t12mo.csv', header=TRUE, sep = ",")
county.df <- county.data %>%
filter(State == "AL" & FIPS.State.County.Code == "1001") %>% # filter based on state and FIPS code
arrange(desc(Sep.19)) %>%                                    # sort based on last months' values
select (-c(X, State, FIPS.State.County.Code))
runApp()
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>% # filter based on state and FIPS code
arrange(desc(Sep.19)) %>%                  # sort based on last months' values
select (-c(X, State, FIPS))                # Make sure to drop unnecessary columns
county.data <- read_excel('county_payer_stats_t12mo.xlsx', header=TRUE, sep = ",")
county.data <- read_excel('county_payer_stats_t12mo.xlsx')
getwd()
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>% # filter based on state and FIPS code
arrange(desc(Sep.19)) %>%                  # sort based on last months' values
select (-c(X, State, FIPS))                # Make sure to drop unnecessary columns
county.df <- head(county.df, 10)
county.df
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>% # filter based on state and FIPS code
arrange(desc(county.data[5])) %>%          # sort based on last months' values
select (-c(State, State_FIPS, FIPS))       # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>% # filter based on state and FIPS code
arrange(desc(county.data[5])) %>%          # sort based on last months' values
select (-c(State, State_FIPS, FIPS))       # Make sure to drop unnecessary columns
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>% # filter based on state and FIPS code
arrange(desc(county.data[,5])) %>%          # sort based on last months' values
select (-c(State, State_FIPS, FIPS))       # Make sure to drop unnecessary columns
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>% # filter based on state and FIPS code
arrange(desc(county.data[[5]])) %>%        # sort based on last months' values
select (-c(State, State_FIPS, FIPS))       # Make sure to drop unnecessary columns
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>% # filter based on state and FIPS code
arrange(desc(county.data[[5]])) %>%        # sort based on last months' values
select (-c(State, State_FIPS, FIPS))       # Make sure to drop unnecessary columns
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>% # filter based on state and FIPS code
#arrange(desc(county.data[[,5]])) %>%        # sort based on last months' values
select (-c(State, State_FIPS, FIPS))       # Make sure to drop unnecessary columns
county.df <- head(county.df, 10)
county.df
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>% # filter based on state and FIPS code
arrange(desc(43727)) %>%        # sort based on last months' values
select (-c(State, State_FIPS, FIPS))       # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
county.df
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>% # filter based on state and FIPS code
arrange(desc(43727)) %>%        # sort based on last months' values
select (-c(State, State_FIPS, FIPS))       # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
county.df
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>% # filter based on state and FIPS code
arrange(desc('43727')) %>%        # sort based on last months' values
select (-c(State, State_FIPS, FIPS))       # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
county.df
county.df
colnames(county.df)
colnames(county.df)[2]
colnames(county.data)
colnames(county.data[5])
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%   # filter based on state and FIPS code
arrange(desc(colnames(county.data[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))         # Make sure to drop unnecessary columns
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%   # filter based on state and FIPS code
arrange(desc(colnames(county.data[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))         # Make sure to drop unnecessary columns
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%   # filter based on state and FIPS code
#arrange(desc(colnames(county.data[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))         # Make sure to drop unnecessary columns
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%   # filter based on state and FIPS code
arrange(desc(colnames(county.data))[5]) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))
colnames(county.data[5])
colnames(county.data)[5]
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%   # filter based on state and FIPS code
arrange(desc(colnames(county.data)[5])) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))         # Make sure to drop unnecessary columns
colnames(county.data)
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%   # filter based on state and FIPS code
arrange(desc(Sep-19)) %>%                    # sort based on last months' values
select (-c(State, State_FIPS, FIPS))         # Make sure to drop unnecessary columns
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%   # filter based on state and FIPS code
arrange(desc(9/19/2019)) %>%                    # sort based on last months' values
select (-c(State, State_FIPS, FIPS))         # Make sure to drop unnecessary columns
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(parse_quosure(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))
parse_quosure(colnames(county.data)[5])
library(rlang)
parse_quosure(colnames(county.data)[5])
parse_quo(colnames(county.data)[5])
target_quo = parse_quo(colnames(county.data)[5])
target_quo = enquo(colnames(county.data)[5])
target_quo = parse_quo(colnames(county.data)[5])
target_quo = !!colnames(county.data)[5]
target_quo = colnames(county.data)[5]
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!!target_quo)) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(State)) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))
county.df <- head(county.df, 10)
colnames(county.data)
head(county.data)
stringToQuoser <- function(varName) {
wrapr::let(c(VARNAME = varName), quo(VARNAME))
}
varQ <- stringToQuoser(colnames(county.data)[5])
library(wrapr)
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!! sym(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!! sym(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))                        # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
head(county.data)
head(county.df)
# Create ggplot2 graph
county.df <- melt(county.df, "Parent.Organization")
ggplot(county.df, aes(variable, value, group = Parent.Organization, color = Parent.Organization)) +
geom_line()
county.df <- melt(county.df, "Parent.Organization")
# Create ggplot2 graph
county.df <- melt(county.df, "Parent_Organization")
ggplot(county.df, aes(variable, value, group = Parent.Organization, color = Parent.Organization)) +
geom_line()
county.df <- melt(county.df, "Parent_Organization")
ggplot(county.df, aes(variable, value, group = Parent_Organization, color = Parent_Organization)) +
geom_line()
county.df
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!! sym(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))                        # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
county.df
head(county.df)
county.df <- melt(county.df, "Parent_Organization")
county.df
ggplot(county.df, aes(variable, value, group = Parent_Organization, color = Parent_Organization)) +
geom_line()
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx' %>%
setNames(., c('id', format(as.Date(as.numeric(names(.)[-1]),
origin = '1899-12-30'), '%m/%d/%Y'))))
head(county.data)
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
head(county.data)
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!! sym(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))                        # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
head(county.df)
county.df <- melt(county.df, "Parent_Organization")
library(janitor)
install.packages("janitor")
library(janitor)
county.df
county.df$variable
excel_numeric_to_date(county.df$variable)
as.Date( as.numeric (as.character(county.df$variable) ),origin="1899-12-30")
colnames(county.data)
colnames(county.data)[4:]
colnames(county.data)[4,]
colnames(county.data)[4]
colnames(county.data)[4:]
colnames(county.data)
colnames(county.data)[4:]
colnames(county.data)[4,:]
colnames(county.data)[5]
colnames(county.data)[5] <- as.Date( as.numeric (as.character(colnames(county.data)[5]) ),origin="1899-12-30")
colnames(county.data)[5]
colnames(county.data)[5]
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
colnames(county.data)
colnames(county.data)[4]
colnames(county.data)[4,]
colnames(county.data)[4,:]
type(colnames(county.data))
datatype(colnames(county.data))
dtype(colnames(county.data))
typeof(colnames(county.data))
list(colnames(county.data)
)
test <- list(colnames(county.data))
test
test[4]
test[[4]]
test <- colnames(county.data)
test
test[4]
test[5]
test[5:]
typeof(test)
test[,4]
test[4:5]
test[5:]
test[5:10]
test[5:length(test)]
subset <- test[5:length(test)]
subset
as.Date( as.numeric (as.character(subset) ),origin="1899-12-30")
colnames(county.data)
colnames(county.data)[5:length(colnames(county.data))]
colnames(county.data)[5:length(colnames(county.data))] <- as.Date( as.numeric (as.character(colnames(county.data)[5:length(colnames(county.data))]) ),origin="1899-12-30")
colnames(county.data)
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
head(county.data)
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!! sym(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))                        # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
head(county.df)
county.df <- melt(county.df, "Parent_Organization")
county.df
county.df$variable <- as.Date( as.numeric (as.character(county.df$variable) ),origin="1899-12-30")
county.df$variable
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
head(county.data)
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!! sym(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))                        # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
head(county.df)
county.df <- melt(county.df, "Parent_Organization")
county.df$variable <- as.Date( as.numeric (as.character(county.df$variable) ),origin="1899-12-30")
ggplot(county.df, aes(variable, value, group = Parent_Organization, color = Parent_Organization)) +
geom_line()
county.df$variable
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
as.Date( as.numeric (as.character(county.df$variable) ),origin="1899-12-30")
as.Date( as.numeric (as.character(colnames(county.data)[5:17]) ),origin="1899-12-30")
as.Date( as.numeric (as.character(colnames(county.data)[5:16]) ),origin="1899-12-30")
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
as.Date( as.numeric (as.character(colnames(county.data)[5:16]) ),origin="1899-12-30")
as.Date( as.numeric (colnames(county.data)[5:16]) ,origin="1899-12-30")
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
as.date(colnames(county.data)[5])
as.Date(colnames(county.data)[5])
colnames(county.data)[5]
as.Date(colnames(county.data)[5], origin = "1899-12-30")
as.Date(as.numeric(colnames(county.data)[5]), origin = "1899-12-30")
as.Date(as.numeric(colnames(county.data)[6]), origin = "1899-12-30")
as.Date(as.numeric(colnames(county.data)[12]), origin = "1899-12-30")
as.Date(as.numeric(colnames(county.data)[14]), origin = "1899-12-30")
as.Date(as.numeric(colnames(county.data)[14]), origin = "12-30-1899")
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
as.Date(as.numeric(colnames(county.data)[14]), origin = "1899-12-30")
colnames(county.data)[14]
as.Date(43817)
as.Date(43817, origin = "1899-12-30")
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
colnames(county.data)[14]
install.packages("janitor")
install.packages("janitor")
excel_numeric_to_date(as.numeric(as.character(colnames(county.data)[5]), date_system = "modern")
)
excel_numeric_to_date(as.numeric(as.character(colnames(county.data)[11]), date_system = "modern"))
excel_numeric_to_date(as.numeric(as.character(colnames(county.data)[14]), date_system = "modern"))
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
head(county.data)
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!! sym(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))                        # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
head(county.df)
# Create ggplot2 graph
county.df <- melt(county.df, "Parent_Organization")
county.df$variable <- as.Date( as.numeric (as.character(county.df$variable) ),origin="1899-12-30")
ggplot(county.df, aes(variable, value, group = Parent_Organization, color = Parent_Organization)) +
geom_line()
