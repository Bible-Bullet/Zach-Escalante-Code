runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
#install.packages("ggplot2")
library(ggplot2)
library(reshape2)
set.seed(111)
mydf <- data.frame(value_1 = sample.int(n = 1000000, size = 100),
value_2 = sample.int(n = 1000000, size = 100),
value_3 = sample.int(n = 1000000, size = 100),
value_4 = sample.int(n = 1000000, size = 100))
mydf <- t(mydf)
df <- melt(mydf)
df$rowid <- 1:length(mydf)
colnames(df)
colnames(df)
ggplot(df, aes(Var1, value, group=factor(Var2))) + geom_line(aes(color=factor(Var2)))
ggplot(df, aes(Var2, value, group=factor(Var1))) + geom_line(aes(color=factor(Var1)))
head(df)
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
options(scipen=999)
#County Shape files
# Read in the county shape files
us.map.county <- readOGR(dsn= './cb_2018_us_county_500k', layer = "cb_2018_us_county_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp <- gSimplify(us.map.county, tol = 0.0125, topologyPreserve = FALSE)
simplified_county <- SpatialPolygonsDataFrame(simplified_shp, data = us.map.county@data)
#format(object.size(simplified), units = "Mb")
#State shape files
us.map.state <- readOGR(dsn= './cb_2018_us_state_500k', layer = "cb_2018_us_state_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp_v1 <- gSimplify(us.map.state, tol = 0.0001, topologyPreserve = FALSE)
simplified_state <- SpatialPolygonsDataFrame(simplified_shp_v1, data = us.map.state@data)
format(object.size(us.map.state), units = "Mb")
### Create dummy data
set.seed(111)
mydf <- data.frame(place = unique(us.map.county$GEOID),
value_1 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_2 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_3 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_4 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE))
# Import the monthly enrollment data for all medicare products
# found here https://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/CMSProgramStatistics/Downloads/Enrollment_Dashboard_Data_File.zip
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
df <- transform(df, OrigMedicare_perc = as.integer(100*OriginalMedicare / MedicareTotal))
df <- transform(df, MedAdvOther_perc = as.integer(100*MedAdvOther / MedicareTotal))
df <- transform(df, MedicareTotal_perc = 100*MedicareTotal / MedicareTotal)
df <- as.data.frame(merge(df, us.map.state, by.x="State", by.y="NAME"))
simplified_county
simplified_county$STATEFP
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
which(simplified_county$STATEFP == "06"), ]
simplified_county[which(simplified_county$STATEFP == input$state), ]
simplified_county[which(simplified_county$STATEFP == "06"), ]
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
head(county.data)
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!! sym(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))                        # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
head(county.df)
getwd()
setwd("C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage/")
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
head(county.data)
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!! sym(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))                        # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
head(county.df)
colnames(county.data)
colnames(county.data)[4:17]
colnames(county.data)[4:16]
colnames(county.data)[4:length(colnames(county.data))]
colnames(county.data)[3:length(colnames(county.data))]
colnames(county.data)[5:length(colnames(county.data))]
dates <- colnames(county.data)[5:length(colnames(county.data))]
dates
as.Date( as.numeric (as.character(dates),origin="1899-12-30")
)
as.Date( as.numeric (as.character(dates),origin="1899-12-30"))
as.Date( as.numeric (as.character(dates),origin="1899-12-30")))
dates
as.Date( as.numeric (as.character(dates)),origin="1899-12-30")
raw_dates <- colnames(county.data)[5:length(colnames(county.data))]
as.Date( as.numeric (as.character(raw_dates)),origin="1899-12-30")
dates <- as.Date( as.numeric (as.character(raw_dates)),origin="1899-12-30")
dates
colnames(county.df)
dates <- as.character(as.Date( as.numeric (raw_dates),origin="1899-12-30"))
dates
colnames(county.df)
colnames(county.df)[5:17]
colnames(county.df)[5:14]
colnames(county.df)[5:13]
colnames(county.df)[3:13]
colnames(county.df)
colnames(county.df)[2:13]
colnames(county.df)[2:13] <- dates
colnames(county.df)
df_county <- read_excel("./data/county_payer_stats_t12mo.xlsx")
colnames(df_county)
colnames(df_county)[5:13]
dates.len <- length(colnames(df_county))
colnames(df_county)[5:dates.len]
runApp()
df_county <- read_excel("./data/county_payer_stats_t12mo.xlsx")
dates.len(length(colnames(df_county)))
dates.len <- (length(colnames(df_county)))
dates.len
colnames(df_county)
raw.dates <- colnames(df_county)[5:dates.len]
raw.dates
formatted.dates <- as.character(as.Date( as.numeric (raw_dates),origin="1899-12-30"))
colnames(df_county)[5:dates.len] <- formatted.dates
colnames(df_county)
runApp()
runApp()
runApp()
runApp()
runApp()
#install.packages("rgdal")
#install.packages("leaflet")
#install.packages("shinydashboard")
#install.packages("DT")
#install.packages("rgeos")
#install.packages("viridis")
#install.packages("wesanderson")
library(DT)
library(rgdal)
library(rgeos)
library(leaflet)
library(viridis)
library(stringr)
library(dplyr)
library(readxl)
library(tidyverse)
library(wesanderson)
options(scipen=999)
#County Shape files
# Read in the county shape files
us.map.county <- readOGR(dsn= './cb_2018_us_county_500k', layer = "cb_2018_us_county_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp <- gSimplify(us.map.county, tol = 0.0125, topologyPreserve = FALSE)
simplified_county <- SpatialPolygonsDataFrame(simplified_shp, data = us.map.county@data)
#format(object.size(simplified), units = "Mb")
#State shape files
us.map.state <- readOGR(dsn= './cb_2018_us_state_500k', layer = "cb_2018_us_state_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp_v1 <- gSimplify(us.map.state, tol = 0.0001, topologyPreserve = FALSE)
simplified_state <- SpatialPolygonsDataFrame(simplified_shp_v1, data = us.map.state@data)
format(object.size(us.map.state), units = "Mb")
# df_county <- read_excel("./data/county_payer_statistics.xlsx")
df_county <- read_excel("./data/county_payer_stats_t12mo.xlsx")
renderLeaflet({
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == input$state.tab2), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP ==
input$state.tab2), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP ==
input$state.tab2), ])[, 1]),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP ==
input$state.tab2), ])[, 2])
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == input$state.tab2), ])
})
renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county)
})
renderLeaflet({
leaflet() %>%
setView(-31, 100, 4) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county)
})
renderLeaflet({
leaflet()
})
renderLeaflet({
leaflet() %>%
setView(-31, 100, 4) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county)
})
runApp()
renderLeaflet({
leaflet() %>%
setView(-31, 100, 4) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
})
renderLeaflet({
leaflet() %>%
setView(-31, 100, 4) %>%
addProviderTiles("Esri.WorldGrayCanvas")
})
leaflet() %>%
setView(-31, 100, 4) %>%
addProviderTiles("Esri.WorldGrayCanvas")
leaflet() %>%
setView(37, 100, 4) %>%
addProviderTiles("Esri.WorldGrayCanvas")
leaflet() %>%
setView(32, 100, 4) %>%
addProviderTiles("Esri.WorldGrayCanvas")
leaflet() %>%
fitBounds(
lng1 = 31,
lat1 = 95,
lng2 = 33,
lat2 = 100)
%>%
addProviderTiles("Esri.WorldGrayCanvas")
leaflet() %>%
fitBounds(
lng1 = 31,
lat1 = 95,
lng2 = 33,
lat2 = 100) %>%
addProviderTiles("Esri.WorldGrayCanvas")
leaflet() %>%
setView(35, 100, 5) %>%
addProviderTiles("Esri.WorldGrayCanvas")
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "01"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "01"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "01"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "01")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "1001"), ])
us.map.county <- readOGR(dsn= './cb_2018_us_county_500k', layer = "cb_2018_us_county_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp <- gSimplify(us.map.county, tol = 0.0125, topologyPreserve = FALSE)
simplified_county <- SpatialPolygonsDataFrame(simplified_shp, data = us.map.county@data)
#format(object.size(simplified), units = "Mb")
#State shape files
us.map.state <- readOGR(dsn= './cb_2018_us_state_500k', layer = "cb_2018_us_state_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp_v1 <- gSimplify(us.map.state, tol = 0.0001, topologyPreserve = FALSE)
simplified_state <- SpatialPolygonsDataFrame(simplified_shp_v1, data = us.map.state@data)
format(object.size(us.map.state), units = "Mb")
#Import the county enrollment data
# df_county <- read_excel("./data/county_payer_statistics.xlsx")
df_county <- read_excel("./data/county_payer_stats_t12mo.xlsx")
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "01"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "01"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "01"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "01")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "1001"), ])
us.map.county <- readOGR(dsn= './cb_2018_us_county_500k', layer = "cb_2018_us_county_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp <- gSimplify(us.map.county, tol = 0.0125, topologyPreserve = FALSE)
simplified_county <- SpatialPolygonsDataFrame(simplified_shp, data = us.map.county@data)
#format(object.size(simplified), units = "Mb")
#State shape files
us.map.state <- readOGR(dsn= './cb_2018_us_state_500k', layer = "cb_2018_us_state_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp_v1 <- gSimplify(us.map.state, tol = 0.0001, topologyPreserve = FALSE)
simplified_state <- SpatialPolygonsDataFrame(simplified_shp_v1, data = us.map.state@data)
format(object.size(us.map.state), units = "Mb")
#Import the county enrollment data
# df_county <- read_excel("./data/county_payer_statistics.xlsx")
df_county <- read_excel("./data/county_payer_stats_t12mo.xlsx")
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "01"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "01"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "01"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "01")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "1001"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "01"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "01"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "01"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "01")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "01"), ])
us.map.county$STATEFP
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = us.map.county[which(us.map.county$STATEFP == "21"), ])
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
)
leaflet() %>%
fitBounds(
lng1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]),
lat1 = min(coordinates(us.map.county[which(us.map.county$STATEFP == "21"), ])[, 2]),
lng2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21"),
lat2 = max(coordinates(us.map.county[which(us.map.county$STATEFP == "21")
) %>%
addProviderTiles("Esri.WorldGrayCanvas")
us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]
us.map.county[which(us.map.county$STATEFP == "21"), ])[, 1]
